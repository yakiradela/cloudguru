name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build Backend Docker Image
      run: |
        docker build -t my-backend ./backend
    - name: Build Frontend Docker Image
      run: |
        docker build -t my-frontend ./frontend

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Push Backend Docker Image to ECR
      run: |
        docker tag my-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/backend:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/backend:latest
    - name: Push Frontend Docker Image to ECR
      run: |
        docker tag my-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/frontend:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/frontend:latest

  terraform:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to ECS
      run: |
        ecs-cli configure --region us-east-2 --cluster my-cluster
        ecs-cli compose --file docker-compose.yml up

