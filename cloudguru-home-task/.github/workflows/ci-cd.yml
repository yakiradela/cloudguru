name: Deploy to AWS ECR and Terraform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure (Terraform)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-role
        aws-region: us-east-2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0

    - name: Run tfsec (Terraform Security Scan)
      run: tfsec ./terraform

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

  build-and-deploy:
    name: Build and Deploy Docker Images and ECS Services
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-role
        aws-region: us-east-2

    - name: Lint Dockerfiles with hadolint
      run: |
        if [ -f ./backend/Dockerfile ]; then hadolint ./backend/Dockerfile; fi
        if [ -f ./frontend/Dockerfile ]; then hadolint ./frontend/Dockerfile; fi

    - name: Build and Push Docker images to ECR
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

        if [ -d "./backend" ]; then
          docker build -t my-backend ./backend
          docker tag my-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/backend:latest
        else
          echo "Backend directory not found. Skipping backend image build."
        fi

        if [ -d "./frontend" ]; then
          docker build -t my-frontend ./frontend
          docker tag my-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/frontend:latest
        else
          echo "Frontend directory not found. Skipping frontend image build."
        fi

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster my-cluster \
          --service my-service \
          --force-new-deployment














